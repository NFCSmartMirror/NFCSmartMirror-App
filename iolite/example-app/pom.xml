<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.iolite.app</groupId>
	<artifactId>example-app</artifactId>
	<version>0.1-SNAPSHOT</version>

	<name>IOLITE Example App</name>
	<description>IOLITE Example App for testing purpose.</description>

	<packaging>jar</packaging>
	<inceptionYear>2016</inceptionYear>

	<properties>
		<frontend.plugin.version>0.0.26</frontend.plugin.version>
	</properties>

	<build>
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.java</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<excludes>
					<!-- exclude all LESS files -->
					<exclude>**/*.less</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/thirdparty-resources</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<excludes>
					<!-- exclude all LESS files -->
					<exclude>**/*.less</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/generated-resources</directory>
				<includes>
					<!-- include generated CSS file -->
					<include>assets/css/*.css</include>
				</includes>
			</resource>
		</resources>

		<plugins>
			<!-- IOLITE uses Java 8 -->
			<plugin>
				<inherited>true</inherited>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<!-- This plugin downloads/installs/builds all required stuff for the front end project. -->
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>${frontend.plugin.version}</version>
				<executions>
					<execution>
						<id>install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<configuration>
							<nodeVersion>v5.2.0</nodeVersion>
							<npmVersion>3.3.12</npmVersion>
						</configuration>
					</execution>

					<!-- install development dependencies, see package.json -->
					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>

					<!-- java script tests with karma/jasmine -->
					<execution>
						<id>java script unit tests</id>
						<goals>
							<goal>karma</goal>
						</goals>
						<configuration>
							<karmaConfPath>src/test/resources/assets/karma.conf.ci.js</karmaConfPath>
						</configuration>
					</execution>

					<!-- validate all JS/HTML/LESS assets, see Gruntfile.js -->
					<execution>
						<id>grunt validate-frontend-resources</id>
						<goals>
							<goal>grunt</goal>
						</goals>
						<configuration>
							<arguments>validate-frontend-resources</arguments>
						</configuration>
					</execution>

					<!-- build front end assets, see Gruntfile.js -->
					<execution>
						<id>grunt build-frontend-resources</id>
						<goals>
							<goal>grunt</goal>
						</goals>
						<configuration>
							<arguments>build-frontend-resources</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- FindBugs check on compile, fail even on Low priority violations -->
			<plugin>
				<inherited>true</inherited>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.3</version>

				<!-- plugin configuration defaults to 'pedantic' and is partially overridden by the validation profiles -->
				<configuration>
					<!-- Enables analysis which takes more memory but finds more bugs. If you run out of memory, changes the value of the effort element to 'Low'. -->
					<effort>Max</effort>
					<!-- Values are 'Low', 'Medium' and 'High'. 'Low' reports all bugs, 'High' reports only most critical bugs -->
					<threshold>Low</threshold>
					<!-- Produces XML report -->
					<xmlOutput>true</xmlOutput>
					<!-- Configures the directory in which the XML report is created -->
					<findbugsXmlOutputDirectory>${project.build.directory}/findbugs</findbugsXmlOutputDirectory>
				</configuration>
				<executions>
					<!-- Ensures that FindBugs inspects source code when project is compiled. -->
					<execution>
						<id>analyze-compile</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Build JAR with dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<finalName>${project.artifactId}</finalName>
					<appendAssemblyId>false</appendAssemblyId>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!-- Build the app and copy to the USER_HOME/.iolite/apps/ when running 'mvn -Deploy' -->
	<profiles>
		<profile>
			<activation>
				<property>
					<name>eploy</name>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- utility for easy testing changes on example-app: copies the jar directly into .iolite/apps and clears FileStorageService folder -->
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<tasks>
										<copy verbose="true" file="target/${project.artifactId}.jar" tofile="${user.home}/.iolite/apps/${project.artifactId}.jar" />
									</tasks>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<!-- IOLITE App API Common -->
		<dependency>
			<groupId>de.iolite.app.api</groupId>
			<artifactId>app-api-common</artifactId>
			<version>0.1-SNAPSHOT</version>
			<scope>provided</scope>
		</dependency>
		<!-- IOLITE App APIs -->
		<dependency>
			<groupId>de.iolite.app.api</groupId>
			<artifactId>app-apis</artifactId>
			<version>0.1-SNAPSHOT</version>
			<scope>provided</scope>
		</dependency>

		<!-- JSON -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20160810</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.5</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.21</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.7</version>
			<scope>provided</scope>
		</dependency>

		<!-- Testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>
	</dependencies>
</project>
